name: Pull request pipeline

#
# Setup pipeline triggers
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#triggers
#

# Enable Pull request validation triggers
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#pr-trigger
pr:
  batch: true
  branches:
    include:
      - stg
      - int
      - dev
    exclude:
      - pro
      - master
  paths:
    exclude:
    - README.md
    - LICENSE.md
    - docs/*
    - helpers/*
    - scripts/*

# Disable Continuous integration (CI) for this pipeline
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#push-trigger
trigger: none

#
# Setup pipeline environment
#

# Setup pipeline resources
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#resources
resources:
  containers:
  - container: gcloud
    image:  google/cloud-sdk:243.0.0-slim
  - container: gitopsci
    image:  raelga/gitopsci:v1.0

# Setup variable groups
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#variables
variables:
- name: PROVIDER
  value: gcp
- name: ENVIRONMENT
  value: $(System.PullRequest.TargetBranchName)
- name: PREFIX
  value: "PR$(System.PullRequest.PullRequestNumber)"
- group: gcloud-environment
  # The gcloud-environment contains:
  #   - GCLOUD_SERVICE_ACCOUNT: The Google Cloud Service Account (as secret)
  #   - GCLOUD_PROJECT_ID: The Google Cloud Project ID (as secret)

#
# Setup pipeline stages
#

stages:

- stage: Environment check
  displayName: Check CI environment
  jobs:

  - job: GoogleCloudEnvCheck
    displayName: Check Google Cloud environment"
    container: gcloud
    steps:

      - bash: |
          if which gcloud &> /dev/null;
          then
            echo "[i] gcloud installed with $(gcloud version | grep 'Google Cloud SDK').";
          else
            echo "[!] gcloud SDK is not installed."; exit 1;
          fi
        displayName: Check Google Cloud SDK version

      - bash: |
          if test ! -z ${GCLOUD_SERVICE_ACCOUNT:-};
          then
            if gcloud auth activate-service-account \
                --key-file <(echo ${GCLOUD_SERVICE_ACCOUNT} | base64 -d);
            then
              echo "[i] Service account $(gcloud config get-value account) set.";
            else
              echo "[!] Unable to activate the service account.";
              exit 1;
            fi
          else
            echo "[!] GCLOUD_SERVICE_ACCOUNT environment variable must be set.";
            exit 1;
          fi
        displayName: Check Google Cloud SDK service account
        env:
          GCLOUD_SERVICE_ACCOUNT: $(GCLOUD_SERVICE_ACCOUNT)

      - bash: |
          if test ! -z ${GCLOUD_PROJECT_ID:-};
          then
            echo "[i] GCLOUD_PROJECT_ID project set to ${GCLOUD_PROJECT_ID}.";
          else
            echo "[!] GCLOUD_PROJECT_ID environment variable must be set.";
            exit 1;
          fi
        displayName: Check Google Cloud SDK project
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

      - script: gcloud projects get-iam-policy $(GCLOUD_PROJECT_ID) \
          --flatten="bindings[].members" \
          --format='table(bindings.role)' \
          --filter="bindings.members:$(gcloud config get-value account)"
        displayName: List Google Cloud SDK service account roles
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

- stage: Infrastructure
  displayName: Infrastructure deploy
  jobs:

  - job: InfrastructureDiff
    displayName: "Preview infrastructure changes"
    container: gcloud
    dependsOn:
      - GoogleCloudEnvCheck
    steps:

      - script: >
          gcloud auth activate-service-account
          --key-file <(echo ${GCLOUD_SERVICE_ACCOUNT} | base64 -d)
        displayName: Activate Google Cloud SDK service account
        env:
          GCLOUD_SERVICE_ACCOUNT: $(GCLOUD_SERVICE_ACCOUNT)

      - bash: |
          while read manifest;
          do
            name=$(sed 's#.*/\([a-z]\+\)/\(.*\).yaml$#\1-\2#' <<< ${manifest});
            test -z ${PREFIX} || name=${PREFIX}-${name};
            echo "Preview $name $manifest";
          done < <(find infra/${PROVIDER}/deployments/${ENVIRONMENT} -name '*yaml');
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

      - bash: |
          while read manifest;
          do
            name=$(sed 's#.*/\([a-z]\+\)/\(.*\).yaml$#\1-\2#' <<< ${manifest});
            test -z ${PREFIX} || name=${PREFIX}-${name};
            echo "Update $name $manifest";
          done < <(find infra/${PROVIDER}/deployments/${ENVIRONMENT} -name '*yaml');
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

- stage: Storage
  displayName: Storage deploy
  jobs:

  - job: CheckBuckets
    displayName: "Check bucket existence"
    container: gcloud
    steps:

      - script: >
          gcloud auth activate-service-account
            --key-file <(echo ${GCLOUD_SERVICE_ACCOUNT} | base64 -d)
        displayName: Activate Google Cloud SDK service account
        env:
          GCLOUD_SERVICE_ACCOUNT: $(GCLOUD_SERVICE_ACCOUNT)

      - script: >
          gcloud deployment-manager deployments
            --project ${GCLOUD_PROJECT_ID} list
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

      - bash: |
          while read bucket;
          do
            name=$(sed 's#.*/\([a-z]\+\)/\(.*\)$#\1-\2#' <<< ${bucket})
            test -z ${PREFIX} || name=${PREFIX}-${name}
            echo gsutil ls gs://$name $bucket
          done < <(find storage/${ENVIRONMENT} -maxdepth 1 -mindepth 1 -type d)

- stage: Kubernetes
  displayName: Kubernetes deploy
  jobs:

  - job: Check k8s environment
    displayName: "Check bucket existence"
    container: gcloud
    steps:

      - script: >
          gcloud auth activate-service-account
            --key-file <(echo ${GCLOUD_SERVICE_ACCOUNT} | base64 -d)
        displayName: Activate Google Cloud SDK service account
        env:
          GCLOUD_SERVICE_ACCOUNT: $(GCLOUD_SERVICE_ACCOUNT)

      - script: >
          K8S_CLUSTER_LOCATION=$(
            sed -n 's/^cluster-location\s\+\(.*\)/\1/p'
            <(gcloud --project ${GCLOUD_PROJECT_ID} \
              deployment-manager deployments describe ${K8S_CLUSTER});
        displayName: Get GKE cluster location
        env:
          GCLOUD_PROJECT_ID: $(GCLOUD_PROJECT_ID)

      - bash: |
          if egrep -q '[a-z]+-[a-z]+[0-9]-[a-z]' <<<${K8S_CLUSTER_LOCATION};
          then
            GCLOUD_CLUSTER_LOCATION_FLAG="--region ${K8S_CLUSTER_LOCATION}";
          else
            GCLOUD_CLUSTER_LOCATION_FLAG="--zone ${K8S_CLUSTER_LOCATION}";
          fi
        displayName: Set GKE cluster location flag

      - bash:
          if gcloud --project ${GCLOUD_PROJECT_ID} \
              container clusters get-credentials ${K8S_CLUSTER} \
              ${GCLOUD_CLUSTER_LOCATION_FLAG};
          then
            echo "[i] kubectl cluster set to ${K8S_CLUSTER}.";
          else
            echo "[!] unable to retrieve cluster credentials.";
          fi
        displayName: Retrieve GKE cluster credentials

      - script: >
          echo kubectl get pods
